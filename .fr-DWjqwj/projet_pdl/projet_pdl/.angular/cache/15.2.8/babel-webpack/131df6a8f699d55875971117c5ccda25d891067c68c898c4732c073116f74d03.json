{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthentificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8090/api/user';\n    this.authTokenKey = 'authToken';\n    this.sessionName = \"my_session\";\n  }\n  register(registerRequest) {\n    return this.http.post(`${this.apiUrl}/register_client`, registerRequest);\n  }\n  authenticate(authenticationRequest) {\n    return this.http.post(`${this.apiUrl}/login`, authenticationRequest);\n  }\n  /*\r\n    storeAuthToken(authToken: string): void {\r\n      localStorage.setItem(this.authTokenKey, authToken);\r\n    }\r\n    */\n  storeJwToken(token) {\n    localStorage.setItem(this.sessionName, token);\n    console.log(token);\n  }\n  getToken() {\n    return localStorage.getItem(this.sessionName);\n  }\n  getAuthToken() {\n    return localStorage.getItem(this.authTokenKey);\n  }\n  removeAuthToken() {\n    localStorage.removeItem(this.authTokenKey);\n  }\n}\nAuthentificationService.ɵfac = function AuthentificationService_Factory(t) {\n  return new (t || AuthentificationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthentificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthentificationService,\n  factory: AuthentificationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,uBAAuB;EAKlCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,gCAAgC;IACzC,iBAAY,GAAG,WAAW;IAC5B,gBAAW,GAAW,YAAY;EAEA;EAExCC,QAAQ,CAACC,eAAgC;IACvC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,kBAAkB,EAAEF,eAAe,CAAC;EAC/E;EAEAG,YAAY,CACVC,qBAA8C;IAE9C,OAAO,IAAI,CAACN,IAAI,CAACG,IAAI,CACnB,GAAG,IAAI,CAACC,MAAM,QAAQ,EACtBE,qBAAqB,CACtB;EACH;EACF;;;;;EAMIC,YAAY,CAACC,KAAa;IAC1BC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,WAAW,EAAEH,KAAK,CAAC;IAC7CI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EACpB;EAGEM,QAAQ;IACR,OAAOL,YAAY,CAACM,OAAO,CAAC,IAAI,CAACJ,WAAW,CAAC;EAC/C;EACAK,YAAY;IACV,OAAOP,YAAY,CAACM,OAAO,CAAC,IAAI,CAACE,YAAY,CAAC;EAChD;EAEAC,eAAe;IACbT,YAAY,CAACU,UAAU,CAAC,IAAI,CAACF,YAAY,CAAC;EAC5C;;AAxCWnB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAsB,SAAvBtB,uBAAuB;EAAAuB,YAFtB;AAAM","names":["AuthentificationService","constructor","http","register","registerRequest","post","apiUrl","authenticate","authenticationRequest","storeJwToken","token","localStorage","setItem","sessionName","console","log","getToken","getItem","getAuthToken","authTokenKey","removeAuthToken","removeItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\projet_pdll\\projet_pdl\\src\\app\\services\\authentification.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Registerrequest } from '../models/registerrequest';\nimport { Observable } from 'rxjs';\nimport { Authentificationrequest } from '../models/authentificationrequest';\nimport { Authentificationresponse } from '../models/authentificationresponse';\nimport { User } from '../models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthentificationService {\n  private apiUrl = 'http://localhost:8090/api/user';\n  private authTokenKey = 'authToken';\nprivate sessionName: string = \"my_session\";\n\n  constructor(private http: HttpClient) { }\n\n  register(registerRequest: Registerrequest): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register_client`, registerRequest);\n  }\n\n  authenticate(\n    authenticationRequest: Authentificationrequest\n  ): Observable<Authentificationresponse> {\n    return this.http.post<Authentificationresponse>(\n      `${this.apiUrl}/login`,\n      authenticationRequest\n    );\n  }\n/*\n  storeAuthToken(authToken: string): void {\n    localStorage.setItem(this.authTokenKey, authToken);\n  }\n  */\n\n    storeJwToken(token: string) {\n    localStorage.setItem(this.sessionName, token);\n    console.log(token);\n  }\n\n\n    getToken() {\n    return localStorage.getItem(this.sessionName);\n  }\n  getAuthToken(): string | null {\n    return localStorage.getItem(this.authTokenKey);\n  }\n\n  removeAuthToken(): void {\n    localStorage.removeItem(this.authTokenKey);\n  }\n  /*\n  getCurrentUser(authToken: string | null): Observable<User> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      'Bearer ' + authToken\n    );\n    return this.http.get<User>(`${this.apiUrl}/current-user`, { headers });\n  }\n*/\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}