{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./authentification.service\";\nexport class AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const authToken = this.authService.getAuthToken();\n    if (authToken) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${authToken}`)\n      });\n    }\n    return next.handle(request);\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthentificationService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EACjCC,YAAoBC,WAAoC;IAApC,gBAAW,GAAXA,WAAW;EAA6B;EAE5DC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE;IACjD,IAAID,SAAS,EAAE;MACbF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,OAAO,EAAEL,OAAO,CAACK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,SAAS,EAAE;OACpE,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;AAXWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAY,SAAtBZ,sBAAsB;EAAAa,YAFrB;AAAM","names":["AuthInterceptorService","constructor","authService","intercept","request","next","authToken","getAuthToken","clone","headers","set","handle","factory","providedIn"],"sourceRoot":"","sources":["D:\\projet_pdll\\projet_pdl\\src\\app\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthentificationService } from './authentification.service';\nimport { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService {\n  constructor(private authService: AuthentificationService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const authToken = this.authService.getAuthToken();\n    if (authToken) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${authToken}`)\n      });\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}