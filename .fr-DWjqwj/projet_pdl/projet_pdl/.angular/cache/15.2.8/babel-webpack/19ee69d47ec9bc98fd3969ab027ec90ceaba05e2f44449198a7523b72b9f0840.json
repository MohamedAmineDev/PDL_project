{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ClientComponent = class ClientComponent {\n  constructor(formBuilder, userService) {\n    this.formBuilder = formBuilder;\n    this.userService = userService;\n    this.loading = false;\n    this.submitted = false;\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  // Getter pratique pour faciliter l'accès aux contrôles du formulaire\n  get f() {\n    return this.registerForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // Arrêtez-vous ici si le formulaire n'est pas valide\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    // Récupérez les valeurs du formulaire\n    const {\n      username,\n      email,\n      password\n    } = this.registerForm.value;\n    // Appelez le service d'inscription de l'utilisateur avec les valeurs du formulaire\n    this.userService.register(username, email, password).subscribe(response => {\n      // Gestion de la réponse réussie\n      console.log('Inscription réussie !');\n      // Réinitialisez le formulaire et les indicateurs\n      this.registerForm.reset();\n      this.loading = false;\n      this.submitted = false;\n    }, error => {\n      // Gestion de l'erreur\n      console.error('Erreur lors de l\\'inscription :', error);\n      this.loading = false;\n    });\n  }\n};\nClientComponent = __decorate([Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})], ClientComponent);\nexport { ClientComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAK1BC,YACUC,WAAwB,EACxBC,WAAwB;IADxB,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IALrB,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;IAMf,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACzCC,QAAQ,EAAE,CAAC,EAAE,EAAEC,UAAU,CAACC,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACF,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACH,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEA;EACA,IAAIC,CAAC;IAAK,OAAO,IAAI,CAACR,YAAY,CAACS,QAAQ;EAAE;EAE7CC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,IAAI,CAACX,YAAY,CAACY,OAAO,EAAE;MAC7B;;IAGF,IAAI,CAACC,OAAO,GAAG,IAAI;IAEnB;IACA,MAAM;MAAEX,QAAQ;MAAEG,KAAK;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACN,YAAY,CAACc,KAAK;IAE7D;IACA,IAAI,CAACf,WAAW,CAACgB,QAAQ,CAACb,QAAQ,EAAEG,KAAK,EAAEC,QAAQ,CAAC,CACjDU,SAAS,CACRC,QAAQ,IAAG;MACT;MACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC;MACA,IAAI,CAACnB,YAAY,CAACoB,KAAK,EAAE;MACzB,IAAI,CAACP,OAAO,GAAG,KAAK;MACpB,IAAI,CAACF,SAAS,GAAG,KAAK;IACxB,CAAC,EACDU,KAAK,IAAG;MACN;MACAH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,IAAI,CAACR,OAAO,GAAG,KAAK;IACtB,CAAC,CACF;EACL;CACD;AAlDYjB,eAAe,eAL3BD,SAAS,CAAC;EACT2B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACW5B,eAAe,CAkD3B;SAlDYA,eAAe","names":["Component","ClientComponent","constructor","formBuilder","userService","registerForm","group","username","Validators","required","email","password","minLength","f","controls","onSubmit","submitted","invalid","loading","value","register","subscribe","response","console","log","reset","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\projet_pdll\\projet_pdl\\src\\app\\client\\client.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})\nexport class ClientComponent {\n  registerForm: FormGroup;\n  loading = false;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private userService: UserService\n  ) {\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  // Getter pratique pour faciliter l'accès aux contrôles du formulaire\n  get f() { return this.registerForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // Arrêtez-vous ici si le formulaire n'est pas valide\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n\n    // Récupérez les valeurs du formulaire\n    const { username, email, password } = this.registerForm.value;\n\n    // Appelez le service d'inscription de l'utilisateur avec les valeurs du formulaire\n    this.userService.register(username, email, password)\n      .subscribe(\n        response => {\n          // Gestion de la réponse réussie\n          console.log('Inscription réussie !');\n          // Réinitialisez le formulaire et les indicateurs\n          this.registerForm.reset();\n          this.loading = false;\n          this.submitted = false;\n        },\n        error => {\n          // Gestion de l'erreur\n          console.error('Erreur lors de l\\'inscription :', error);\n          this.loading = false;\n        }\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}