{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.error = '';\n    this.currentUser = null;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n  login() {\n    const authenticationRequest = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password\n    };\n    this.authService.authenticate(authenticationRequest).subscribe(response => {\n      this.authService.storeAuthToken(response.token);\n      // rediriger vers la page suivante ici\n      this.router.navigate(['/home']);\n      // Fetch the current user\n      /* const authToken = this.authService.getAuthToken();\r\n       if (authToken) {\r\n         this.authService.getCurrentUser(authToken).subscribe(\r\n           (user) => {\r\n           if (user.role === 'ROLE_ADMIN') {\r\n               this.router.navigate(['/home']);\r\n             } else {\r\n               this.router.navigate(['/']);\r\n             }\r\n           \r\n           }\r\n          \r\n         );\r\n       }*/\n    }, error => {\n      this.error = 'Invalid email or password.';\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YACUC,EAAe,EACfC,WAAoC,EACpCC,MAAe;IAFf,OAAE,GAAFF,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IALhB,UAAK,GAAW,EAAE;IAClB,gBAAW,GAAgB,IAAI;IAM7B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACQ,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ;KACnC,CAAC;EACJ;EAEAE,KAAK;IACH,MAAMC,qBAAqB,GAA4B;MACrDJ,KAAK,EAAE,IAAI,CAACF,SAAS,CAACO,KAAK,CAACL,KAAK;MACjCE,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACO,KAAK,CAACH;KAChC;IAED,IAAI,CAACN,WAAW,CAACU,YAAY,CAACF,qBAAqB,CAAC,CAACG,SAAS,CAC3DC,QAAQ,IAAI;MACX,IAAI,CAACZ,WAAW,CAACa,cAAc,CAACD,QAAQ,CAACE,KAAK,CAAC;MAC/C;MACA,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B;MACD;;;;;;;;;;;;;;IAcD,CAAC,EACAC,KAAK,IAAI;MACR,IAAI,CAACA,KAAK,GAAG,4BAA4B;IAE3C,CAAC,CACF;EACH;CAED;AAlDYnB,cAAc,eAL1BF,SAAS,CAAC;EACTsB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWtB,cAAc,CAkD1B;SAlDYA,cAAc","names":["Component","Validators","LoginComponent","constructor","fb","authService","router","loginForm","group","email","required","password","login","authenticationRequest","value","authenticate","subscribe","response","storeAuthToken","token","navigate","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\projet_pdll\\projet_pdl\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthentificationService } from '../services/authentification.service';\nimport { Authentificationrequest } from '../models/authentificationrequest';\nimport { User } from '../models/User';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  \n  loginForm!: FormGroup;\n  error: string = '';\n  currentUser: User | null = null;\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthentificationService,\n    private router : Router\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n  }\n  \n  login(): void {\n    const authenticationRequest: Authentificationrequest = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password,\n    };\n  \n    this.authService.authenticate(authenticationRequest).subscribe(\n      (response) => {\n        this.authService.storeAuthToken(response.token);\n        // rediriger vers la page suivante ici\n        this.router.navigate(['/home']);\n        // Fetch the current user\n       /* const authToken = this.authService.getAuthToken();\n        if (authToken) {\n          this.authService.getCurrentUser(authToken).subscribe(\n            (user) => {\n            if (user.role === 'ROLE_ADMIN') {\n                this.router.navigate(['/home']);\n              } else {\n                this.router.navigate(['/']);\n              }\n            \n            }\n           \n          );\n        }*/\n      },\n      (error) => {\n        this.error = 'Invalid email or password.';\n       \n      }\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}