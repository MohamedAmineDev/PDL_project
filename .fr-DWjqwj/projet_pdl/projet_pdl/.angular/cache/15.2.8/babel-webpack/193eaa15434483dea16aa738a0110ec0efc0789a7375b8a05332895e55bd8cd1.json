{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthentificationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8090/api/user';\n    this.authTokenKey = 'authToken';\n    this.sessionName = \"my_session\";\n  }\n  register(registerRequest) {\n    return this.http.post(`${this.apiUrl}/register_client`, registerRequest);\n  }\n  authenticate(authenticationRequest) {\n    return this.http.post < this.storeAuthTokenstoreAuthToken > (`${this.apiUrl}/login`, authenticationRequest);\n  }\n  storeAuthToken(authToken) {\n    localStorage.setItem(this.authTokenKey, authToken);\n  }\n  getAuthToken() {\n    return localStorage.getItem(this.authTokenKey);\n  }\n  removeAuthToken() {\n    localStorage.removeItem(this.authTokenKey);\n  }\n  getCurrentUser(token) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\n    return this.http.get(`${this.apiUrl}/current-user`, {\n      headers\n    });\n  }\n}\nAuthentificationService.ɵfac = function AuthentificationService_Factory(t) {\n  return new (t || AuthentificationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthentificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthentificationService,\n  factory: AuthentificationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAW9D,OAAM,MAAOC,uBAAuB;EAKlCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,gCAAgC;IACzC,iBAAY,GAAG,WAAW;IAC5B,gBAAW,GAAW,YAAY;EAEA;EAExCC,QAAQ,CAACC,eAAgC;IACvC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,kBAAkB,EAAEF,eAAe,CAAC;EAC/E;EAEAG,YAAY,CACVC,qBAA8C;IAE9C,OAAO,IAAI,CAACN,IAAI,CAACG,IAAI,GAAC,IAAI,CAACI,4BAA4B,IACrD,GAAG,IAAI,CAACH,MAAM,QAAQ,EACtBE,qBAAqB,CACtB;EACH;EAEAE,cAAc,CAACC,SAAiB;IAC9BC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,YAAY,EAAEH,SAAS,CAAC;EACpD;EAOAI,YAAY;IACV,OAAOH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,YAAY,CAAC;EAChD;EAEAG,eAAe;IACbL,YAAY,CAACM,UAAU,CAAC,IAAI,CAACJ,YAAY,CAAC;EAC5C;EAEAK,cAAc,CAACC,KAAoB;IACjC,MAAMC,OAAO,GAAG,IAAItB,WAAW,EAAE,CAACuB,GAAG,CACnC,eAAe,EACf,SAAS,GAAGF,KAAK,CAClB;IACD,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAO,GAAG,IAAI,CAACjB,MAAM,eAAe,EAAE;MAAEe;IAAO,CAAE,CAAC;EACxE;;AA3CWrB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAwB,SAAvBxB,uBAAuB;EAAAyB,YAFtB;AAAM","names":["HttpHeaders","AuthentificationService","constructor","http","register","registerRequest","post","apiUrl","authenticate","authenticationRequest","storeAuthTokenstoreAuthToken","storeAuthToken","authToken","localStorage","setItem","authTokenKey","getAuthToken","getItem","removeAuthToken","removeItem","getCurrentUser","token","headers","set","get","factory","providedIn"],"sourceRoot":"","sources":["D:\\projet_pdll\\projet_pdl\\src\\app\\services\\authentification.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Registerrequest } from '../models/registerrequest';\nimport { Observable } from 'rxjs';\nimport { Authentificationrequest } from '../models/authentificationrequest';\nimport { Authentificationresponse } from '../models/authentificationresponse';\nimport { User } from '../models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthentificationService {\n  private apiUrl = 'http://localhost:8090/api/user';\n  private authTokenKey = 'authToken';\nprivate sessionName: string = \"my_session\";\n\n  constructor(private http: HttpClient) { }\n\n  register(registerRequest: Registerrequest): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register_client`, registerRequest);\n  }\n\n  authenticate(\n    authenticationRequest: Authentificationrequest\n  ): Observable<store> {\n    return this.http.post<this.storeAuthTokenstoreAuthToken>(\n      `${this.apiUrl}/login`,\n      authenticationRequest\n    );\n  }\n\n  storeAuthToken(authToken: string): void {\n    localStorage.setItem(this.authTokenKey, authToken);\n  }\n\n\n  \n  \n\n\n  getAuthToken(): string | null {\n    return localStorage.getItem(this.authTokenKey);\n  }\n\n  removeAuthToken(): void {\n    localStorage.removeItem(this.authTokenKey);\n  }\n  \n  getCurrentUser(token: string | null): Observable<User> {\n    const headers = new HttpHeaders().set(\n      'Authorization',\n      'Bearer ' + token\n    );\n    return this.http.get<User>(`${this.apiUrl}/current-user`, { headers });\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}